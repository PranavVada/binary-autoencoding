import torch
import torch.nn as nn
from torchvision import transforms
from torch.utils.data import DataLoader
import matplotlib.pyplot as plt
import numpy as np
from PIL import Image

# Model definition
class ColorToBinaryCNN(nn.Module):
    def __init__(self):
        super(ColorToBinaryCNN, self).__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, padding=1)
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, padding=1)
        self.conv3 = nn.Conv2d(32, 1, kernel_size=3, padding=1)
        self.relu = nn.ReLU()
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        x = self.relu(self.conv1(x))
        x = self.relu(self.conv2(x))
        x = self.sigmoid(self.conv3(x))
        return x

# Load the trained model
model = ColorToBinaryCNN()
model.load_state_dict(torch.load('D:/images/color_to_binary_cnn.pth'))
model.eval()

# Transform for test images
transform = transforms.Compose([
    transforms.Resize((512, 512)),
    transforms.ToTensor()
])

# Load test dataset
test_dataset = datasets.ImageFolder(root='D:/images/test_class', transform=transform)
test_loader = DataLoader(test_dataset, batch_size=8, shuffle=False)

# Evaluation loop
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)

# Display some example results
num_images_to_display = min(8, len(test_loader.dataset))  # Display at most 8 images
for i in range(num_images_to_display):
    image, _ = test_loader.dataset[i]
    image = image.unsqueeze(0).to(device)
    output = model(image)
    output = output.squeeze().cpu().detach().numpy()

    # Plot the binary image
    plt.imshow(output, cmap='binary')
    plt.title('Predicted Binary Image')
    plt.axis('off')
    plt.show()
